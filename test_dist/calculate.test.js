const{replaceCharAtMods:replaceCharAtMods}=require("../src/calculate"),http=require("http"),{createServer:createServer}=require("../src/index");describe("replaceCharAtMods function",(()=>{test("happy path",(()=>{expect(replaceCharAtMods("replaceChars",2)).toBe("re2l2c2C2a2s")})),test("happy path with float number",(()=>{expect(replaceCharAtMods("replaceChars",2.8)).toBe("re2l2c2C2a2s")})),test("should throw an error if non-numeric value is passed",(()=>{expect((()=>replaceCharAtMods("string","not a number"))).toThrow("The second argument must be a number.")})),test("should throw an error if not less than 10",(()=>{expect((()=>replaceCharAtMods("string",10))).toThrow("The second argument must be less than 10.")})),test("should throw an error if less than 3 characters",(()=>{expect((()=>replaceCharAtMods("a",3))).toThrow("The first argument must be more than 3 characters long.")}))})),describe("HTTP Server",(()=>{let e;function a(e){return new Promise(((a,t)=>{http.get(`http://localhost:3000${e}`,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{a({statusCode:e.statusCode,data:t})}))})).on("error",t)}))}beforeAll((a=>{e=createServer(),e.listen(3e3,a)})),afterAll((a=>{e.close(a)})),test("should return correct sum for valid numbers",(async()=>{const e=await a("/calculate?str=aaaaa&num=3");expect(e.statusCode).toBe(200),expect(e.data).toBe("Replacing characters in aaaaa by 3 is aaa3a")})),test("should handle negative numbers",(async()=>{const e=await a("/calculate?str=aaaaa&num=-3");expect(e.statusCode).toBe(200),expect(e.data).toBe("Replacing characters in aaaaa by -3 is aaa3a")})),test("should handle floating-point numbers",(async()=>{const e=await a("/calculate?str=aaaaa&num=3.2");expect(e.statusCode).toBe(200),expect(e.data).toBe("Replacing characters in aaaaa by 3.2 is aaa3a")})),test("should return 400 for missing parameters",(async()=>{const e=await a("/calculate?str=5");expect(e.statusCode).toBe(400),expect(e.data).toBe("Please provide a valid string and a number as query parameter: str, num")})),test("should return 400 for invalid numbers",(async()=>{const e=await a("/calculate?str=aaaaa&num=abc");expect(e.statusCode).toBe(400),expect(e.data).toBe("The second argument must be a valid number.")})),test("should return 404 for invalid path",(async()=>{const e=await a("/invalid");expect(e.statusCode).toBe(404),expect(e.data).toBe("Not Found")}))}));